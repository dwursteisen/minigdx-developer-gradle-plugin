/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.minigdx.gradle.plugin

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue

/**
 * A simple functional test for the 'com.github.minigdx.gradle.plugin.greeting' plugin.
 */
class MinigdxKotlinMppPluginFunctionalTest {

    @TempDir
    lateinit var projectDir: File

    @Test
    fun `can build`() {
        // Setup the test build
        val buildDir = projectDir.resolve("build")
        val functionalTestDir = projectDir.resolve("functionalTest")
        functionalTestDir.mkdirs()
        projectDir.resolve("settings.gradle").writeText("""
plugins {
    id("org.gradle.toolchains.foojay-resolver-convention") version("0.4.0")
}
""")
        projectDir.resolve("build.gradle").writeText("""
            plugins {
                id('com.github.minigdx.gradle.plugin.developer.mpp')
            }
        """)

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withArguments("build")
            .withProjectDir(projectDir)
            .build()

        // Verify the result
        assertEquals(TaskOutcome.SUCCESS, result.task(":build")?.outcome)
    }

    @Test
    @Disabled("Configuration Cache not yet supported by Kotlin Multiplatform")
    fun `can build with configuration cache`() {
        // Setup the test build
        projectDir.resolve("settings.gradle").writeText("""
plugins {
    id("org.gradle.toolchains.foojay-resolver-convention") version("0.4.0")
}
""")
        projectDir.resolve("build.gradle").writeText("""
            plugins {
                id('com.github.minigdx.gradle.plugin.developer.mpp')
            }
        """)

        // Run the build (first run to populate cache)
        GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withArguments("build", "--configuration-cache")
            .withProjectDir(projectDir)
            .build()

        // Run the build again and check for cache reuse
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withArguments("build", "--configuration-cache")
            .withProjectDir(projectDir)
            .build()

        // Verify the result
        assertTrue(result.output.contains("Reusing configuration cache."))
    }
}